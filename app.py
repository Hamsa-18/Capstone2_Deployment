# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dvVZzpCwTcnZYXs1FGynyJH1DKrmC3H4
"""

import streamlit as st
import pandas as pd
import pickle
import numpy as np
import os

# Page config
st.set_page_config(page_title="Heart Disease Prediction", page_icon="‚ù§Ô∏è", layout="wide")

# Custom style
st.markdown("""
<style>
    .main { max-width: 1000px; padding: 2rem; }
    .stButton>button {
        background-color: #FF4B4B; color: white; font-weight: bold;
        border-radius: 5px; padding: 0.5rem 2rem;
    }
    .stButton>button:hover { background-color: #FF6B6B; }
</style>
""", unsafe_allow_html=True)


@st.cache_resource
def load_artifacts():
    """Load model and scaler safely."""
    model_path = "model.pkl"
    scaler_path = "scaler.pkl"

    # Check if files exist
    if not os.path.exists(model_path):
        st.error("‚ùå model.pkl not found in project folder.")
        return None, None, None
    if not os.path.exists(scaler_path):
        st.error("‚ùå scaler.pkl not found in project folder.")
        return None, None, None

    try:
        with open(model_path, "rb") as f:
            model = pickle.load(f)
        with open(scaler_path, "rb") as f:
            scaler = pickle.load(f)

        feature_columns = [
            "age", "sex", "cp", "trestbps", "chol", "fbs",
            "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal"
        ]
        return model, scaler, feature_columns

    except Exception as e:
        st.error(f"‚ö†Ô∏è Error loading model or scaler: {e}")
        return None, None, None


# Load model and scaler
with st.spinner("üîÑ Loading prediction model..."):
    model, scaler, feature_columns = load_artifacts()

# Stop app if model/scaler not loaded
if model is None or scaler is None:
    st.stop()

# Sidebar inputs
st.sidebar.title("ü©∫ Patient Information")
st.sidebar.info("Enter the following health details:")

input_data = {
    "age": st.sidebar.number_input("Age", 20, 100, 50),
    "sex": st.sidebar.selectbox("Sex (1=Male, 0=Female)", [1, 0]),
    "cp": st.sidebar.selectbox("Chest Pain Type (0-3)", [0, 1, 2, 3]),
    "trestbps": st.sidebar.number_input("Resting Blood Pressure", 80, 200, 120),
    "chol": st.sidebar.number_input("Cholesterol Level", 100, 600, 200),
    "fbs": st.sidebar.selectbox("Fasting Blood Sugar > 120 mg/dl (1=True, 0=False)", [1, 0]),
    "restecg": st.sidebar.selectbox("Resting ECG Results (0-2)", [0, 1, 2]),
    "thalach": st.sidebar.number_input("Maximum Heart Rate Achieved", 60, 220, 150),
    "exang": st.sidebar.selectbox("Exercise Induced Angina (1=Yes, 0=No)", [1, 0]),
    "oldpeak": st.sidebar.number_input("ST Depression Induced by Exercise", 0.0, 10.0, 1.0),
    "slope": st.sidebar.selectbox("Slope of Peak Exercise ST Segment (0-2)", [0, 1, 2]),
    "ca": st.sidebar.selectbox("Number of Major Vessels (0-4)", [0, 1, 2, 3, 4]),
    "thal": st.sidebar.selectbox("Thalassemia (0=Normal, 1=Fixed defect, 2=Reversible defect)", [0, 1, 2])
}

st.markdown("---")
st.subheader("‚ù§Ô∏è Heart Disease Risk Assessment")

if st.button("üîç Predict Heart Disease Risk", use_container_width=True):
    try:
        # Convert to DataFrame
        input_df = pd.DataFrame([input_data], columns=feature_columns)
        input_scaled = scaler.transform(input_df)
        proba = model.predict_proba(input_scaled)[0]
        risk_percentage = proba[1] * 100

        st.markdown("### üß† Prediction Results")
        st.metric("Heart Disease Risk", f"{risk_percentage:.1f}%")
        st.progress(int(risk_percentage) / 100)

        if proba[1] > 0.5:
            st.error("üö® High Risk of Heart Disease Detected")
        else:
            st.success("‚úÖ Low Risk of Heart Disease")

    except Exception as e:
        st.error(f"An error occurred during prediction: {e}")

st.markdown("---")
st.caption("¬© 2025 Heart Disease Prediction Tool | For educational purposes only")

